<%
const { routeInfo, utils } = it;
const {
  operationId,
  method,
  route,
  moduleName,
  responsesTypes,
  description,
  tags,
  summary,
  pathArgs,
} = routeInfo;
const { _, fmtToJSDocLine, require } = utils;


const methodAliases = {
  get: (pathName, hasPathInserts) =>
    _.camelCase(`get_${pathName}_${hasPathInserts ? "detail" : "list"}`),
  post: (pathName, hasPathInserts) => _.camelCase(`post_${pathName}`),
  put: (pathName, hasPathInserts) => _.camelCase(`put_${pathName}`),
  patch: (pathName, hasPathInserts) => _.camelCase(`partial_update_${pathName}`),
  delete: (pathName, hasPathInserts) => _.camelCase(`delete_${pathName}`),
};

const createCustomOperationId = (method, route, moduleName) => {
  const hasPathInserts = /\{(\w)+}/g.test(route);
  const splittedRouteBySlash = _.compact(_.replace(route, /\{(\w)+}/g, "").split("/"));
  const spliceLength = Math.max(Math.min(2, splittedRouteBySlash.length - 1), 1);
  const routeParts = (splittedRouteBySlash.length > 1
    ? splittedRouteBySlash.splice(spliceLength)
    : splittedRouteBySlash
  ).join("_");
  console.log(routeParts)
  return routeParts.length > 3 && methodAliases[method]
    ? methodAliases[method](routeParts, hasPathInserts)
    : _.camelCase(_.lowerCase(method) + "_" + [moduleName].join("_")) || "index";
};
return createCustomOperationId(method, route, moduleName);
%>
